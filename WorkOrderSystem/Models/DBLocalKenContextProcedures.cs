// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;
using WorkOrderSystem.Models;

namespace WorkOrderSystem.Models
{
    public partial class DBLocalKenContext
    {
        private IDBLocalKenContextProcedures _procedures;

        public virtual IDBLocalKenContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new DBLocalKenContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public IDBLocalKenContextProcedures GetProcedures()
        {
            return Procedures;
        }

        protected void OnModelCreatingGeneratedProcedures(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<spPagingOrderResult>().HasNoKey().ToView(null);
        }
    }

    public partial class DBLocalKenContextProcedures : IDBLocalKenContextProcedures
    {
        private readonly DBLocalKenContext _context;

        public DBLocalKenContextProcedures(DBLocalKenContext context)
        {
            _context = context;
        }

        public virtual async Task<List<spPagingOrderResult>> spPagingOrderAsync(OutputParameter<int?> PageIndex, OutputParameter<double?> PageSize, OutputParameter<int?> TotalPages, OutputParameter<double?> RecordCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterPageIndex = new SqlParameter
            {
                ParameterName = "PageIndex",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = PageIndex?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterPageSize = new SqlParameter
            {
                ParameterName = "PageSize",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = PageSize?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Float,
            };
            var parameterTotalPages = new SqlParameter
            {
                ParameterName = "TotalPages",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = TotalPages?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterRecordCount = new SqlParameter
            {
                ParameterName = "RecordCount",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = RecordCount?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Float,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterPageIndex,
                parameterPageSize,
                parameterTotalPages,
                parameterRecordCount,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<spPagingOrderResult>("EXEC @returnValue = [dbo].[spPagingOrder] @PageIndex OUTPUT, @PageSize OUTPUT, @TotalPages OUTPUT, @RecordCount OUTPUT", sqlParameters, cancellationToken);

            PageIndex.SetValue(parameterPageIndex.Value);
            PageSize.SetValue(parameterPageSize.Value);
            TotalPages.SetValue(parameterTotalPages.Value);
            RecordCount.SetValue(parameterRecordCount.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
